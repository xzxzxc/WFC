//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export interface IClient {

    get(): Promise<void>;

    getConfig(): Promise<string>;

    getPossibleValues(type: string): Promise<PossibleValuesDto[]>;

    postApiCollapse(collapseCommand: CollapseCommand): Promise<CollapseResult>;

    postApiCollapseHistory(debug: boolean | null | undefined, collapseCommand: CollapseCommand): Promise<CollapseWithHistoryResult>;
}

export class Client implements IClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    get(): Promise<void> {
        let url_ = this.baseUrl + "/";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    getConfig(): Promise<string> {
        let url_ = this.baseUrl + "/config";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetConfig(_response);
        });
    }

    protected processGetConfig(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    getPossibleValues(type: string): Promise<PossibleValuesDto[]> {
        let url_ = this.baseUrl + "/possibleValues/{type}";
        if (type === undefined || type === null)
            throw new Error("The parameter 'type' must be defined.");
        url_ = url_.replace("{type}", encodeURIComponent("" + type));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPossibleValues(_response);
        });
    }

    protected processGetPossibleValues(response: Response): Promise<PossibleValuesDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PossibleValuesDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PossibleValuesDto[]>(null as any);
    }

    postApiCollapse(collapseCommand: CollapseCommand): Promise<CollapseResult> {
        let url_ = this.baseUrl + "/api/collapse";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(collapseCommand);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiCollapse(_response);
        });
    }

    protected processPostApiCollapse(response: Response): Promise<CollapseResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CollapseResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CollapseResult>(null as any);
    }

    postApiCollapseHistory(debug: boolean | null | undefined, collapseCommand: CollapseCommand): Promise<CollapseWithHistoryResult> {
        let url_ = this.baseUrl + "/api/collapse/history?";
        if (debug !== undefined && debug !== null)
            url_ += "debug=" + encodeURIComponent("" + debug) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(collapseCommand);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiCollapseHistory(_response);
        });
    }

    protected processPostApiCollapseHistory(response: Response): Promise<CollapseWithHistoryResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CollapseWithHistoryResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CollapseWithHistoryResult>(null as any);
    }
}

export class PossibleValuesDto implements IPossibleValuesDto {
    name?: string;
    values?: PossibleValue[];

    constructor(data?: IPossibleValuesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            if (Array.isArray(_data["values"])) {
                this.values = [] as any;
                for (let item of _data["values"])
                    this.values!.push(PossibleValue.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PossibleValuesDto {
        data = typeof data === 'object' ? data : {};
        let result = new PossibleValuesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (Array.isArray(this.values)) {
            data["values"] = [];
            for (let item of this.values)
                data["values"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPossibleValuesDto {
    name?: string;
    values?: PossibleValue[];
}

export class PossibleValue implements IPossibleValue {
    value?: string;
    suitableValuesTop?: string[];
    suitableValuesRight?: string[];
    suitableValuesBottom?: string[];
    suitableValuesLeft?: string[];

    constructor(data?: IPossibleValue) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            if (Array.isArray(_data["suitableValuesTop"])) {
                this.suitableValuesTop = [] as any;
                for (let item of _data["suitableValuesTop"])
                    this.suitableValuesTop!.push(item);
            }
            if (Array.isArray(_data["suitableValuesRight"])) {
                this.suitableValuesRight = [] as any;
                for (let item of _data["suitableValuesRight"])
                    this.suitableValuesRight!.push(item);
            }
            if (Array.isArray(_data["suitableValuesBottom"])) {
                this.suitableValuesBottom = [] as any;
                for (let item of _data["suitableValuesBottom"])
                    this.suitableValuesBottom!.push(item);
            }
            if (Array.isArray(_data["suitableValuesLeft"])) {
                this.suitableValuesLeft = [] as any;
                for (let item of _data["suitableValuesLeft"])
                    this.suitableValuesLeft!.push(item);
            }
        }
    }

    static fromJS(data: any): PossibleValue {
        data = typeof data === 'object' ? data : {};
        let result = new PossibleValue();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        if (Array.isArray(this.suitableValuesTop)) {
            data["suitableValuesTop"] = [];
            for (let item of this.suitableValuesTop)
                data["suitableValuesTop"].push(item);
        }
        if (Array.isArray(this.suitableValuesRight)) {
            data["suitableValuesRight"] = [];
            for (let item of this.suitableValuesRight)
                data["suitableValuesRight"].push(item);
        }
        if (Array.isArray(this.suitableValuesBottom)) {
            data["suitableValuesBottom"] = [];
            for (let item of this.suitableValuesBottom)
                data["suitableValuesBottom"].push(item);
        }
        if (Array.isArray(this.suitableValuesLeft)) {
            data["suitableValuesLeft"] = [];
            for (let item of this.suitableValuesLeft)
                data["suitableValuesLeft"].push(item);
        }
        return data;
    }
}

export interface IPossibleValue {
    value?: string;
    suitableValuesTop?: string[];
    suitableValuesRight?: string[];
    suitableValuesBottom?: string[];
    suitableValuesLeft?: string[];
}

export class CollapseResult implements ICollapseResult {
    width?: number;
    height?: number;
    values?: string[];

    constructor(data?: ICollapseResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.width = _data["width"];
            this.height = _data["height"];
            if (Array.isArray(_data["values"])) {
                this.values = [] as any;
                for (let item of _data["values"])
                    this.values!.push(item);
            }
        }
    }

    static fromJS(data: any): CollapseResult {
        data = typeof data === 'object' ? data : {};
        let result = new CollapseResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["width"] = this.width;
        data["height"] = this.height;
        if (Array.isArray(this.values)) {
            data["values"] = [];
            for (let item of this.values)
                data["values"].push(item);
        }
        return data;
    }
}

export interface ICollapseResult {
    width?: number;
    height?: number;
    values?: string[];
}

export class CollapseCommand implements ICollapseCommand {
    name?: string;
    width?: number;
    height?: number;
    elements?: Element[];

    constructor(data?: ICollapseCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.width = _data["width"];
            this.height = _data["height"];
            if (Array.isArray(_data["elements"])) {
                this.elements = [] as any;
                for (let item of _data["elements"])
                    this.elements!.push(Element.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CollapseCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CollapseCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["width"] = this.width;
        data["height"] = this.height;
        if (Array.isArray(this.elements)) {
            data["elements"] = [];
            for (let item of this.elements)
                data["elements"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICollapseCommand {
    name?: string;
    width?: number;
    height?: number;
    elements?: Element[];
}

export class Element implements IElement {
    x?: number;
    y?: number;
    value?: string;

    constructor(data?: IElement) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.x = _data["x"];
            this.y = _data["y"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): Element {
        data = typeof data === 'object' ? data : {};
        let result = new Element();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["x"] = this.x;
        data["y"] = this.y;
        data["value"] = this.value;
        return data;
    }
}

export interface IElement {
    x?: number;
    y?: number;
    value?: string;
}

export class CollapseWithHistoryResult implements ICollapseWithHistoryResult {
    width?: number;
    height?: number;
    valuesHistory?: (string | undefined)[][];

    constructor(data?: ICollapseWithHistoryResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.width = _data["width"];
            this.height = _data["height"];
            if (Array.isArray(_data["valuesHistory"])) {
                this.valuesHistory = [] as any;
                for (let item of _data["valuesHistory"])
                    this.valuesHistory!.push(item);
            }
        }
    }

    static fromJS(data: any): CollapseWithHistoryResult {
        data = typeof data === 'object' ? data : {};
        let result = new CollapseWithHistoryResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["width"] = this.width;
        data["height"] = this.height;
        if (Array.isArray(this.valuesHistory)) {
            data["valuesHistory"] = [];
            for (let item of this.valuesHistory)
                data["valuesHistory"].push(item);
        }
        return data;
    }
}

export interface ICollapseWithHistoryResult {
    width?: number;
    height?: number;
    valuesHistory?: (string | undefined)[][];
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}